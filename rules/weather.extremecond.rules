rule "Alert if snow is falling"
when
    Item WittenWetter_Current_CurrentConditions changed
then
	//catch snow falling
	if( WittenWetter_Current_CurrentConditions.state == 'Schneefall' || WittenWetter_Current_CurrentConditions.state == 'Leichter Schneefall' )
	{
        logInfo("INFO","Wetter: Es wurde Schneefall gemeldet...")
		pushover("Wetterwarnung: Aktuell Schneefall in Witten.", 1)
	}
end

rule "Push UWZ Alerts"
when
    Item uwz changed
then
	if( uwz.state != '6-2' )
	{
        logInfo("INFO","Wetter: Es wurde eine UWZ Meldung veroeffentlicht...")
		pushover("Wetterwarnung: Unwetterzentrale meldet '" + uwz.transformedState + "' fuer Witten.", 1)
	} else {
		logInfo("INFO","Wetter: UWZ wechselt Status auf '" + uwz.state + "--" + uwz.transformedState + "'.")
	}
end

rule "WeatherAlert_RAWMessage_Changed"
when
    Item WeatherAlert_RAWMessage changed
then
    var String alertmessage = ""
    alertmessage = WeatherAlert_RAWMessage.state.toString().trim().replaceAll("[\\s]+"," ")
    if (alertmessage.length() > 1 && alertmessage != "Uninitialized"){
        logInfo("INFO", "WU Unwetterwarnung erkannt")
        val umlaute = newArrayList('Ä','Ö',"Ü","ä","ö","ü","ß","é","è","ê","â","á","à","§","°","ß","","","","","","Ö","Ä","Extrem Temperatur: ")
        val replace = newArrayList("Ã„","Ã–","Ãœ","Ã¤","Ã¶","Ã¼","ÃŸ","Ã©","Ã¨","Ãª","Ã¢","Ã¡","Ã","Â§","Â°","à&#159;","&amp;","nbsp","\n","\r","  ","Thunderstorms ","à&#150;"," à&#132;","Extreme high temperature")
        umlaute.forEach[x,i|
            alertmessage = alertmessage.replace(replace.get(i),x)
        ]

        WeatherAlert_Message.postUpdate(alertmessage)
        WeatherAlert.postUpdate(alertmessage)
        
        if (WeatherAlertActive.state == OFF){
            sendCommand(WeatherAlertActive,ON)
            pushover("Wetterwarnung: " + alertmessage, 1)
        } else {
            pushover("Wetterwarnung aktualisiert: " + alertmessage, -1)
        }
    } else {
        WeatherAlert_Message.postUpdate("Uninitialized")
        WeatherAlert.postUpdate("Uninitialized")

        if (WeatherAlertActive.state == ON){
            sendCommand(WeatherAlertActive,OFF)
            pushover("Wetterwarnung aufgehoben: " + alertmessage, -1)       
        }
    }

    // Aktualisierungsdatum setzen   
    postUpdate(WeatherAlert_LastUpdate, new DateTimeType())
    logInfo("INFO", "Updated WeatherAlert_LastUpdate: " + WeatherAlert_LastUpdate.state)
end

rule "DWD_Changed"
when
    Item dwd changed
then
    var String alertmessage = ""
    alertmessage = DWD_Message.state.toString().trim().replaceAll("[\\s]+"," ")
    postUpdate(DWD_AlertActive, alertmessage)

    if (alertmessage.length() > 1 && alertmessage != "Uninitialized"){
        if (DWD_AlertActive.state == OFF){
            sendCommand(DWD_AlertActive,ON)
            pushover("Wetterwarnung DWD: " + alertmessage, 1)
        } else {
            pushover("Wetterwarnung DWD aktualisiert: " + alertmessage, -1)
        }
    } else {
        DWD_Message.postUpdate("Uninitialized")

        if (DWD_AlertActive.state == ON){
            sendCommand(DWD_AlertActive,OFF)
            pushover("Wetterwarnung DWD aufgehoben: " + alertmessage, -1)       
        }
    }
    
    // Aktualisierungsdatum setzen   
    postUpdate(DWD_LastUpdate, new DateTimeType())
end